#include<stdio.h>
 int main()
{
    int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter number of process:");
    scanf("%d",&n);
  
    printf("nEnter Burst Time:n");
    for(i=0;i<n;i++)
    {
        printf("p%d:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;         
    }
  
   //sorting of burst times
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }
  
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
  
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
   
    wt[0]=0;            
  
   
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
  
        total+=wt[i];
    }
  
    avg_wt=(float)total/n;      
    total=0;
  
    printf("nProcesst    Burst Time    tWaiting TimetTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];   
        total+=tat[i];
        printf("np%dtt  %dtt    %dttt%d",p[i],bt[i],wt[i],tat[i]);
    }
  
    avg_tat=(float)total/n;    
    printf("nnAverage Waiting Time=%f",avg_wt);
    printf("nAverage Turnaround Time=%fn",avg_tat);
}
Output:

Shortest Job First Scheduling

 

In the above program, we calculate the average waiting and average turn around times of the jobs. We first ask the user to enter the number of processes and store it in n. We then accept the burst times from the user. It is stored in the bt array.

After this, the burst times are sorted in the next section so the shortest one can be executed first. Here selection sort is used to sort the array of burst time bt.

Waiting time of the first element is zero, the remaining waiting time is calculated by using two for loop that runs from 1 to in that controls the outer loop and the inner loop is controlled by another for loop that runs from j=0 to j<i.  Inside the loop, the waiting time is calculated by adding the burst time to the waiting time.

1
2
3
4
5
6
7
for(i=1;i<n;i++)
  {
      wt[i]=0;
      for(j=0;j<i;j++)
          wt[i]+=bt[j];
      total+=wt[i];
  }
Total is the addition of all the waiting time together. The average waiting time is calculated:

avg_wt=(float)total/n;

and it is printed.

 

Next, the turnaround time is calculated by adding the burst time and the waiting time

1
2
3
4
5
6
for(i=0;i<n;i++)
{
   tat[i]=bt[i]+wt[i];   
   total+=tat[i];
   printf("np%dtt  %dtt    %dttt%d",p[i],bt[i],wt[i],tat[i]);
}
Again, here the for loop is used. And the total variable here holds the total turnaround time. After this the average turnaround time is calculated. This is how Non-Preemptive scheduling takes place

 

Code for Pre-emptive SJF Scheduling

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
#include <stdio.h>
  
int main() 
{
      int arrival_time[10], burst_time[10], temp[10];
      int i, smallest, count = 0, time, limit;
      double wait_time = 0, turnaround_time = 0, end;
      float average_waiting_time, average_turnaround_time;
      printf("nEnter the Total Number of Processes:t");
      scanf("%d", &limit); 
      printf("nEnter Details of %d Processesn", limit);
      for(i = 0; i < limit; i++)
      {
            printf("nEnter Arrival Time:t");
            scanf("%d", &arrival_time[i]);
            printf("Enter Burst Time:t");
            scanf("%d", &burst_time[i]); 
            temp[i] = burst_time[i];
      }
      burst_time[9] = 9999;  
      for(time = 0; count != limit; time++)
      {
            smallest = 9;
            for(i = 0; i < limit; i++)
            {
                  if(arrival_time[i] <= time && burst_time[i] < burst_time[smallest] && burst_time[i] > 0)
                  {
                        smallest = i;
                  }
            }
            burst_time[smallest]--;
            if(burst_time[smallest] == 0)
            {
                  count++;
                  end = time + 1;
                  wait_time = wait_time + end - arrival_time[smallest] - temp[smallest];
                  turnaround_time = turnaround_time + end - arrival_time[smallest];
            }
      }
      average_waiting_time = wait_time / limit; 
      average_turnaround_time = turnaround_time / limit;
      printf("nnAverage Waiting Time:t%lfn", average_waiting_time);
      printf("Average Turnaround Time:t%lfn", average_turnaround_time);
      return 0;
}
Output:

 

Non pre-emptive Scheduling

The only difference in preemptive and non-preemptive is that when two burst times are same the algorithm evaluates them on first come first serve basis. Hence there is an arrival time variable.

With this, we come to an end of this Shortest Job Scheduling in C article. I hope you got an idea of how this scheduling works.

Now that you have understood the basics of SJF Scheduling in C, check out the training provided by Edureka on many technologies like Java, Spring and  many more, a trusted online learning company with a network of more than 250,000 satisfied learners spread across the globe

Got a question for us? Mention it in the comments section of this “Shortest Job First Scheduling in C Programming” blog and we will get back to you as soon as possible.

 

 

Recommended videos for you
how-to-crack-cfa-level-1-exam.jpg
How To Crack CFA Level 1 Exam
Microsoft-Azure-Certification-Microsoft-Azure-Tutorial-Azure-Training-Edureka.jpeg
Microsoft Azure Certifications – All You Need To Know
nandan-nilekani-on-entrepreneurship.jpg
Nandan Nilekani on Entrepreneurship
Recommended blogs for you
Service-now0-300x175.png
How To Get A ServiceNow Developer Instance?
Inheritance-in-C-300x175.jpg
All You Need to Know About Inheritance in C++
A-One-Stop-Guide-to-Learning-from-Home-300x175.jpg
A One-Stop Guide to Learning from Home
RCM-300x175.png
Here are the Ridiculously Committed Mentors of 2018
no-image-1.png
Introduction to C Programming-Algorithms
Radix-Sort-Program-In-C-300x175.png
How To Best Implement Radix Sort Program In C?
Asset-3@2x-300x208.png
Edureka: The Ridiculous Learning Revolutioner
mapsn-in-C-300x175.jpg
What are Maps in C++ and how to implement it?
Arrays-in-C-300x175.jpg
All you Need to Know about Arrays In C Programming
IndiaITRepublic-Top-10-Facts-about-IBM-India-Edureka-Blog-Edureka-0-1-300x175.png
#IndiaITRepublic – Top 10 Facts about Accenture – India
Feature-Image-of-RPA-Automation-Anywhere-RPA-Automation-Anywhere-Edureka-1-300x175.jpg
RPA Automation Anywhere – A Beginner’s Guide To Automation Anywhere
Vol.-XIV-Edureka-Career-Watch-25th-May-2019-Edureka-Blog-Edureka-300x175.png
Vol. XIV – Edureka Career Watch – 25th May 2019
Feature-Image-19-300x158.jpg
Why Strategic Transformation of Business is Important?
Top-10-Programming-Languages-1-300x169.jpg
Top 10 Programming Languages to Learn In 2021
risk-analysis-in-software-testing-300x175.jpg
What is Risk Analysis in Software Testing and how to perform it?
Instructor-Led-Training-2-2-300x175.jpg
Instructor-Led Training: RIGHT Way To Learn Online
no-image-1.png
How to Install Flutter on Windows? – Step by Step guide
IndiaITRepublic-Top-10-Facts-about-IBM-India-Edureka-Blog-Edureka-0-300x175.png
#IndiaITRepublic – Top 10 Facts about IBM – India
C-interview-questyion-1-300x175.png
Top 50 C# Interview Questions You Need To Know In 2023
What-is-Interface-Testing-300x175.jpg
What is Interface Testing and why do we need it?
Comments
0 Comments
Join the discussion

Trending Courses
Full Stack Web Development Internship Program
Full Stack Web Development Internship Program
29k Enrolled Learners
Weekend/Weekday
Live Class
Reviews
 5 (11250)
Data Science and Machine Learning Internship Program
Data Science and Machine Learning Internship ...
22k Enrolled Learners
Weekend/Weekday
Live Class
Reviews
 5 (8450)
Cyber Security and Ethical Hacking Internship Program
Cyber Security and Ethical Hacking Internship ...
15k Enrolled Learners
Weekend/Weekday
Live Class
Reviews
 5 (5650)
Microsoft Power BI Certification Training Course
Microsoft Power BI Certification Training Cou ...
66k Enrolled Learners
Weekend/Weekday
Live Class
Reviews
 5 (26350)
DevOps Certification Training Course
DevOps Certification Training Course
157k Enrolled Learners
Weekend/Weekday
Live Class
Reviews
 5 (62700)
AWS Solutions Architect Certification Training Course
AWS Solutions Architect Certification Trainin ...
156k Enrolled Learners
Weekend/Weekday
Live Class
Reviews
 5 (62250)
PMP Certification Training Course
PMP Certification Training Course
65k Enrolled Learners
Weekend/Weekday
Live Class
Reviews
 5 (25800)
Python Certification Training Course
Python Certification Training Course
52k Enrolled Learners
Weekend
Live Class
Reviews
 5 (20700)
Cyber Security Course
Cyber Security Course
60k Enrolled Learners
Weekend
Live Class
Reviews
 5 (23650)
ChatGPT-4 Complete Course: Beginners to Advanced
ChatGPT-4 Complete Course: Beginners to Advan ...
9k Enrolled Learners
Weekend
Live Class
Reviews
 5 (3600)
Browse Categories
Artificial IntelligenceBI and VisualizationBig DataBlockchainBusiness ManagementCloud ComputingCyber SecurityData ScienceData Warehousing and ETLDatabasesDevOpsDigital MarketingEnterpriseFront End Web DevelopmentHuman Resource ManagementMobile DevelopmentOperating SystemsOperations ManagementProduct ManagementProgramming & FrameworksProject Management and MethodologiesRobotic Process AutomationSoftware TestingSupply Chain ManagementSystems & Architecture
Subscribe to our Newsletter, and get personalized recommendations.
 Already have an account? Sign in.×
TRENDING CERTIFICATION COURSES
DevOps Certification Training
AWS Architect Certification Training
Big Data Hadoop Certification Training
Tableau Training & Certification
Python Certification Training for Data Science
Selenium Certification Training
PMP® Certification Exam Training
Robotic Process Automation Training using UiPath
Apache Spark and Scala Certification Training
Microsoft Power BI Training
Online Java Course and Training
Python Certification Course
TRENDING MASTERS COURSES
Data Scientist Masters Program
DevOps Engineer Masters Program
Cloud Architect Masters Program
Big Data Architect Masters Program
Machine Learning Engineer Masters Program
Full Stack Web Developer Masters Program
Business Intelligence Masters Program
Data Analyst Masters Program
Test Automation Engineer Masters Program
Post-Graduate Program in Artificial Intelligence & Machine Learning
Post-Graduate Program in Big Data Engineering
COMPANY
About us
News & Media
Reviews
Contact us
Blog
Community
Sitemap
Blog Sitemap
Community Sitemap
Webinars
WORK WITH US
Careers
Become an Instructor
Become an Affiliate
Become a Partner
Hire from Edureka
DOWNLOAD APP
apple_store google_playstore
CATEGORIES
Cloud Computing DevOps Big Data Data Science BI and Visualization Programming & Frameworks Software Testing Project Management and Methodologies Robotic Process Automation Frontend Development Data Warehousing and ETL Artificial Intelligence Blockchain Databases Cyber Security Mobile Development Operating Systems Architecture & Design Patterns Digital Marketing
TRENDING BLOG ARTICLES
Selenium tutorial Selenium interview questions Java tutorial What is HTML Java interview questions PHP tutorial JavaScript interview questions Spring tutorial PHP interview questions Inheritance in Java Polymorphism in Java Spring interview questions Pointers in C Linux commands Android tutorial JavaScript tutorial jQuery tutorial SQL interview questions MySQL tutorial Machine learning tutorial Python tutorial What is machine learning Ethical hacking tutorial SQL injection AWS certification career opportunities AWS tutorial What Is cloud computing What is blockchain Hadoop tutorial What is artificial intelligence Node Tutorial Collections in Java Exception handling in java Python Programming Language Python interview questions Multithreading in Java ReactJS Tutorial Data Science vs Big Data vs Data Analytics Software Testing Interview Questions R Tutorial Java Programs JavaScript Reserved Words and Keywords Implement thread.yield() in Java: Examples Implement Optical Character Recognition in Python All you Need to Know About Implements In Java
© 2023 Brain4ce Education Solutions Pvt. Ltd. All rights Reserved. Terms & Conditions Legal & Privacy
   
"PMP®","PMI®", "PMI-ACP®" and "PMBOK®" are registered marks of the Project Management Institute, Inc. MongoDB®, Mongo and the leaf logo are the registered trademarks of MongoDB, Inc.
